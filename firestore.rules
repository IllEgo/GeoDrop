rules_version = '2';
service cloud.firestore {
  function isSignedIn() {
    return request.auth != null;
  }

  function isCurrentUser(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isValidUsername(name) {
    return name is string && name.matches('^[a-z0-9._]{3,20}$');
  }

  match /databases/{database}/documents {
    match /users/{userId} {
      function hasOnlyAllowedUserFields() {
        return request.resource.data.keys().hasOnly([
          'displayName',
          'username',
          'role',
          'businessName',
          'businessCategories',
          'nsfwEnabled',
          'nsfwEnabledAt'
        ]);
      }

      allow read: if isSignedIn();

      allow create, update: if isCurrentUser(userId)
        && hasOnlyAllowedUserFields()
        && (!request.resource.data.keys().hasAny(['username'])
            || isValidUsername(request.resource.data.username));
    }

    match /usernames/{username} {
      allow read: if isSignedIn();

      allow create, update: if isSignedIn()
        && request.resource.data.keys().hasOnly(['userId'])
        && request.resource.data.userId == request.auth.uid;

      allow delete: if isSignedIn()
        && resource.data.userId == request.auth.uid;
    }
  }
}