rules_version = '2';
service cloud.firestore {
  function isSignedIn() {
    return request.auth != null;
  }

  function isCurrentUser(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isValidUsername(name) {
    return name is string && name.matches('^[a-z0-9._]{3,20}$');
  }

  function voteValue(data, userId) {
    return (data.voteMap is map && data.voteMap[userId] is int)
      ? data.voteMap[userId]
      : 0;
  }

  function voteCount(data, field) {
    return (data[field] is int) ? data[field] : 0;
  }

  function isValidVoteTransition(before, after, userId) {
    let previousVote = voteValue(before, userId);
    let newVote = voteValue(after, userId);
    let deltaUpvotes = voteCount(after, 'upvoteCount') - voteCount(before, 'upvoteCount');
    let deltaDownvotes = voteCount(after, 'downvoteCount') - voteCount(before, 'downvoteCount');

    return (previousVote in [-1, 0, 1])
      && (newVote in [-1, 0, 1])
      && ((previousVote == newVote && deltaUpvotes == 0 && deltaDownvotes == 0)
        || (previousVote == 0 && newVote == 1 && deltaUpvotes == 1 && deltaDownvotes == 0)
        || (previousVote == 0 && newVote == -1 && deltaUpvotes == 0 && deltaDownvotes == 1)
        || (previousVote == 1 && newVote == 0 && deltaUpvotes == -1 && deltaDownvotes == 0)
        || (previousVote == -1 && newVote == 0 && deltaUpvotes == 0 && deltaDownvotes == -1)
        || (previousVote == -1 && newVote == 1 && deltaUpvotes == 1 && deltaDownvotes == -1)
        || (previousVote == 1 && newVote == -1 && deltaUpvotes == -1 && deltaDownvotes == 1));
  }

  match /databases/{database}/documents {
    match /users/{userId} {
      function hasOnlyAllowedUserFields() {
        return request.resource.data.keys().hasOnly([
          'displayName',
          'username',
          'role',
          'businessName',
          'businessCategories',
          'nsfwEnabled',
          'nsfwEnabledAt'
        ]);
      }

      allow read: if isSignedIn();

      allow create, update: if isCurrentUser(userId)
        && hasOnlyAllowedUserFields()
        && (!request.resource.data.keys().hasAny(['username'])
            || isValidUsername(request.resource.data.username));
    }

    match /usernames/{username} {
      allow read: if isSignedIn();

      allow create, update: if isSignedIn()
        && request.resource.data.keys().hasOnly(['userId'])
        && request.resource.data.userId == request.auth.uid;

      allow delete: if isSignedIn()
        && resource.data.userId == request.auth.uid;
    }

    match /drops/{dropId} {
      allow get, list: if isSignedIn() || request.auth == null;
      function hasOnlyAllowedDropFields() {
        return request.resource.data.keys().hasOnly([
          'text',
          'description',
          'lat',
          'lng',
          'createdBy',
          'createdAt',
          'isDeleted',
          'deletedAt',
          'groupCode',
          'dropType',
          'businessId',
          'businessName',
          'contentType',
          'mediaUrl',
          'mediaMimeType',
          'mediaData',
          'mediaStoragePath',
          'isNsfw',
          'nsfw',
          'nsfwLabels',
          'upvoteCount',
          'downvoteCount',
          'voteMap',
          'reportCount',
          'reportedBy',
          'redemptionCode',
          'redemptionLimit',
          'redemptionCount',
          'redeemedBy',
          'decayDays',
          'collectedBy'
        ]);
      }

      function isExplorer() {
        return isSignedIn()
          && exists(/databases/$(database)/documents/users/$(request.auth.uid))
          && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'EXPLORER';
      }

      allow create: if isExplorer()
        && request.resource.data.createdBy == request.auth.uid
        && hasOnlyAllowedDropFields();
      allow update: if isSignedIn()
        && request.writeFields.hasOnly([
          'voteMap.' + request.auth.uid,
          'upvoteCount',
          'downvoteCount',
          'collectedBy.' + request.auth.uid
        ])
        && isValidVoteTransition(resource.data, request.resource.data, request.auth.uid);
    }
  }
}